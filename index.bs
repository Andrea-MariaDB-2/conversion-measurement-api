<pre class='metadata'>
Title: Attribution Reporting
Shortname: attribution-reporting
Level: 1
Status: CG-DRAFT
Group: wicg
Repository: WICG/conversion-measurement-api
URL: https://wicg.github.io/conversion-measurement-api
Editor: Charlie Harrison, Google Inc. https://google.com, csharrison@chromium.org
Abstract: An API to report that an event may have been caused by another cross-site event. These reports are designed to transfer little enough data between sites that the sites can't use them to track individual users.

Markup Shorthands: markdown on
Complain About: accidental-2119 on, missing-example-ids on
Assume Explicit For: on
</pre>
<pre class=link-defaults>
spec:html; type:element; text:a
</pre>

Introduction {#intro}
=====================

<em>This section is non-normative</em>

This specification describes how web browsers can provide a mechanism to the
web that supports measuring and attributing conversions (e.g. purchases) to ads
a user interacted with on another site. This mechanism should remove one need
for cross site identifiers like third party cookies.

## Overview ## {#overview}

A page can register an [=attribution source=] on a site by providing
 <{a/attributionsourceeventid}> and <{a/attributiondestination}> attributes on an <{a}> element.
When such an <{a}> element is clicked, and the resulting navigation commits in a document within the [=same site=] as
the <{a/attributiondestination}>, the [=attribution source=] is stored in UA storage.

At a later point, the <{a/attributiondestination}> site may fire an HTTP request to
trigger attribution, which matches an [=attribution trigger=] with any previously
stored sources. If matching sources exist, they are scheduled to be
reported at a later time, possibly multiple days in the future.

Reports are sent to reporting endpoints that are configured in the attribution source
and attribution trigger.

# Fetch monkeypatches # {#fetch-monkeypatches}

Issue: Patch into fetch for cancelling requests redirected to the .well-known
conversion domain.

# HTML monkeypatches # {#html-monkeypatches}

<h3 id="longlong-reflection"> long long reflection </h3>

Add the following rules for <a spec=html>reflecting</a> <a spec=html>content attributes</a>:

If a reflecting IDL attribute has a signed integer type ({{long long}}) then, on getting, the content attribute must be
parsed according to the <a spec="html">rules for parsing integers</a>, and if that is successful, and the value is in the
range of the IDL attribute's type, the resulting value must be returned. If, on the other hand, it fails or returns
an out of range value, or if the attribute is absent, then the default value must be returned instead, or 0 if there
is no default value. On setting, the given value must be converted to the shortest possible string representing the
number as a valid integer and then that string must be used as the new content attribute value.

If a reflecting IDL attribute has a signed integer type ({{long long}}) that is <dfn>limited to only non-negative numbers</dfn> then,
on getting, the content attribute must be parsed according to the <a spec="html">rules for parsing non-negative integers</a>, and if
that is successful, and the value is in the range of the IDL attribute's type, the resulting value must be returned.
If, on the other hand, it fails or returns an out of range value, or if the attribute is absent, the default value
must be returned instead, or âˆ’1 if there is no default value. On setting, if the value is negative, the user agent
must throw an {{"IndexSizeError"}} {{DOMException}}. Otherwise, the given value must be converted to the shortest possible
string representing the number as a valid non-negative integer and then that string must be used as the new content
attribute value.

<h3 id="monkeypatch-anchor">&lt;a&gt; element</h3>

Add the following <a spec=html>content attributes</a> to the <{a}> element:

: <{a/attributionsourceeventid}>
:: Identifies the declared attribution source
: <{a/attributiondestination}>
:: Site which can attribute an event to the declared attribution source
: <{a/attributionreportto}>
:: [=url/origin=] to receive attribution reports
: <{a/attributionexpiry}>
:: Length of time the attribution souce is valid
: <{a/attributionsourcepriority}>
:: The priority of this source relative to other sources for attribution triggers

Extend the <{a}> element's <a spec=html>DOM interface</a> to include the following interface:

<pre class="idl">
partial interface HTMLAnchorElement {
    [CEReactions] attribute DOMString attributionDestination;
    [CEReactions] attribute DOMString attributionSourceEventId;
    [CEReactions] attribute DOMString attributionReportTo;
    [CEReactions] attribute long long attributionExpiry;
    [CEReactions] attribute long long attributionSourcePriority;
};
</pre>

The IDL attributes {{HTMLAnchorElement/attributionDestination}}, {{HTMLAnchorElement/attributionSourceEventId}}, 
{{HTMLAnchorElement/attributionReportTo}} must <a spec=html>reflect</a> the respective content 
attributes of the same name.

The IDL attribute {{HTMLAnchorElement/attributionExpiry}} must reflect the <{a/attributionexpiry}>
content attribute, [=limited to only non-negative numbers=].

The <dfn for="a" element-attr>attributiondestination</dfn> attribute is a string
representing an [=url/origin=] that is intended to be [=same site=] with the origin
of the final navigation url resulting from running <a spec="html">follow the hyperlink</a>
with the <{a}> element.

The <dfn for="a" element-attr>attributionsourceeventid</dfn> attribute is a string
containing information about the `attribution source` and will be supplied in the
[=attribution report=].

The <dfn for="a" element-attr>attributionreportto</dfn> attribute optionally declares the
[=origin=] to send the [=attribution report=] for this source.

The <dfn for="a" element-attr>attributionexpiry</dfn> attribute optionally defines the amount
of time in milliseconds the attribution source should be considered for reporting.

The <dfn for="a" element-attr>attributionsourcepriority</dfn> attribute optionally defines the
priority of a source relative to other sources when triggering attribution.

<h3 id="monkeypatch-navigation">Navigation</h3>

This section ensures that an [=attribution source=] associated with a navigation
results in a top-level navigation whose final url is [=same site=] with the
[=attribution source/attribution destination=].

<h4 id="monkeypatch-navigation-params">Navigation Params</h4>

A <a spec="HTML">navigation params</a> struct has an item:

: <dfn for="navigation params">attribution source</dfn>
:: null or an [=attribution source=] declared when initiating a navigation

<h4 id="monkeypatch-navigate-algorithm">Navigate algorithm</h4>

Modify the <a spec="html">navigate</a> algorithm to accept a new optional parameter
<var>attributionSource</var> of type [=attribution source=] defaulting to null.

In <a spec="html">navigate</a>, within step

> 19. This is the step that attempts to obtain resource, if necessary. Jump to the first appropriate substep:
>     ...

in the case where

> If resource is a response

modify the substep

> 7. Let navigationParams be a new navigation params whose request is null, response is resource
>     ...

to set the [=navigation params/attribution source=] of |navigationParams| to |attributionSource|.

In the case where

> If resource is a request whose url's scheme is "javascript"

modify the substep 

> 4. Let navigationParams be a new navigation params whose request is resource, 
>     ...

to set the [=navigation params/attribution source=] of |navigationParams| to |attributionSource|.

In the case where

> If resource is a request whose url's scheme is a fetch scheme

modify the substep to pass |attributionSource| to the <a spec="html">process a navigate fetch</a> algorithm.

Note: The final case, were the request is not a javascript or fetch scheme, does not need to be handled
 as it will not result in the navigation of a top-level browsing context.

<h4 id="monkeypatch-navigate-fetch">Process a navigate fetch</h4>

Modify the <a spec="html">process a navigate fetch</a> algorithm to accept a new optional parameter
<var>attributionSource</var> of type [=attribution source=] defaulting to null.

In <a spec="html">process a navigate fetch</a>, modify the step

> 15. Otherwise, if locationURL is a URL whose scheme is a fetch scheme, then run process a navigate fetch with a new request 
>     ...

to also pass |attributionSource| into the <a spec="html">process a navigate fetch</a> algorithm.

Modify the step

> 19. Let navigationParams be a new navigation params whose request is request, response is response,
>     ...

to set the [=navigation params/attribution source=] of |navigationParams| to |attributionSource|.

<h4 id="monkeypatch-document-creation">Document creation</h4>

At the time <a spec="html">create and initialize a <code>Document</code> object</a> is invoked, the user agent knows the final url used for the
navigation and can validate the [=attribution source/attribution destination=].

In <a spec="html">create and initialize a <code>Document</code> object</a>, before

> 2. Let permissionsPolicy be the result of creating a permissions policy from a response given browsingContext
>     ...

add the following step:

1. Execute [=maybe process an attribution source=] with |navigationParams| and |browsingContext|.

<h3 id="monkeypatch-following-hyperlink">Follow the hyperlink</h4>

Attribution source information declared on the <{a}> element needs to be passed to the
<a spec="html">navigate</a> algorithm. 

In <a spec="html">follow the hyperlink</a> after

> 14. Let historyHandling be "replace" if windowType is not "existing or none"; otherwise, "default".

add the following steps:

1. Let <var>attributionSource</var> be null
1. If |subject| is an <{a}> element, set |attributionSource| to the result of running [=obtain an attribution source=] with |subject|.

Modify the step:

> 15. Queue an element task on the DOM manipulation task source given subject to navigate target to request
>     ...

to call <a spec="html">navigate</a> with |attributionSource| set to |attributionSource|.


# Structures # {#structures}

<h3 dfn-type=dfn>Attribution source</h3>

An attribution source is a [=struct=] with the following items:

<dl dfn-for="attribution source">
: <dfn>source origin</dfn>
:: An [=url/origin=].
: <dfn>event id</dfn>
:: A non-negative 64-bit integer.
: <dfn>attribution destination</dfn>
:: A [=site=].
: <dfn>reporting endpoint</dfn>
:: An [=url/origin=].
: <dfn>expiry</dfn>
:: A point in time.
: <dfn>priority</dfn>
:: A 64-bit integer.
: <dfn>source time</dfn>
:: A point in time.
: <dfn>number of reports</dfn>
:: Number of [=attribution reports=] created for this [=attribution source=].

</dl>

<h3 dfn-type=dfn>Attribution trigger</h3>

An attribution trigger is a [=struct=] with the following items:

<dl dfn-for="attribution trigger">
: <dfn>trigger origin</dfn>
:: An [=url/origin=].
: <dfn>trigger data</dfn>
:: A [=string=].
: <dfn>trigger time</dfn>
:: A point in time.
: <dfn>reporting endpoint</dfn>
:: An [=url/origin=].

</dl>

<h3 dfn-type=dfn>Attribution report</h3>

An attribution report is a [=struct=] with the following items:

<dl dfn-for="attribution report">
: <dfn>event id</dfn>
:: A [=string=].
: <dfn>trigger data</dfn>
:: A [=string=].
: <dfn>credit</dfn>
:: An integer in the range [0, 100].

</dl>

# Storage # {#storage}

A user agent holds an <dfn>attribution source cache</dfn>, which is an [=ordered set=] of [=attribution sources=].

A user agent holds an <dfn>attribution report cache</dfn>, which is an [=ordered set=] of [=attribution reports=].

The above caches are collectively known as the <dfn>attribution caches</dfn>. The [=attribution caches=] are
shared among all [=environment settings objects=].

Note: This would ideally use <a spec=storage>storage bottles</a> to provide access to the attribution caches.
However attribution data is inherently cross-site, and operations on storage would need to span across all storage bottle maps.

# Algorithms # {#algorithms}

<h3 algorithm id="parsing-attribution-destination">Parsing an attribution destination</h3>

To <dfn>parse an attribution destination</dfn> from a string |str|:
1. Let |url| be the result of running the [=URL parser=] on the value of
    the |str|.
1. If |url| is failure or null, return null.
1. Return the result of [=obtain a site|obtaining a site=] from |url|'s
    [=url/origin=].

<h3 algorithm id="obtaining-attribution-source-anchor">Obtaining an attribution source from an <code>a</code> element</h3>

To <dfn>obtain an attribution source</dfn> from an <{a}> element |anchor|:
1. Let |currentTime| be the current time.
1. If |anchor| does not have both an <{a/attributiondestination}> attribute and
    an <{a/attributionsourceeventid}> attribute, return null.
1. Let |attributionDestination| be the result of running
    [=parse an attribution destination=] with anchor's
    <{a/attributiondestination}> attribute.
1. If |attributionDestination| is null, return null.
1. Let |sourceOrigin| be |anchor|'s [=relevant settings object=]'s
    [=environment/top-level origin=].
1. Let |reportingOrigin| be |sourceOrigin|.
1. If |anchor| has an <{a/attributionreportto}> attribute, then:
    1. Let |reportingUrl| be the result of running the
        [=URL parser=] with |anchor|'s <{a/attributionreportto}> value
    1. If |reportingUrl| is failure or null, return null.
    1. Set |reportingOrigin| to |reportingUrl|'s [=url/origin=].
1. Let |expiry| be 30 days.
1. If |anchor| has an <{a/attributionexpiry}> attribute, and applying the
    <a spec="html">rules for parsing non-negative integers</a> to the attributes's value
    results in an integer greater than zero, then set |expiry| to that value.
1. Let |priority| be 0.
1. If |anchor| has an <{a/attributionsourcepriority}> attribute, and applying the
    <a spec="html">rules for parsing integers</a> to the attributes's value
    results in an integer, then set |priority| to that value.
1. Let |source| be a new [=attribution source=] struct whose items are:

    : [=attribution source/source origin=]
    :: |sourceOrigin|
    : [=attribution source/event id=]
    :: The result of running [=parse attribution data=] with |anchor|'s
        <{a/attributionsourceeventid}> attribute modulo [=max event id value=].
    : [=attribution source/attribution destination=]
    :: |attributionDestination|
    : [=attribution source/reporting endpoint=]
    :: |reportingOrigin|
    : [=attribution source/expiry=]
    :: |currentTime| + |expiry|
    : [=attribution source/priority=]
    :: |priority|
    : [=attribution source/source time=]
    :: |currentTime|
1. Return |source|

<dfn>Max event id value</dfn> is a vendor specific integer which controls 
the maximum size value which can be used as an [=attribution source/event id=]

<h3 id="processing-an-attribution-source">Processing an attribution source</h3>

To <dfn>maybe process an attribution source</dfn> given a <a spec="HTML">navigation params</a>
|navigationParams| and [=browsing context=] |browsingContext|, run the following steps:
1. If |browsingContext| is not a <a spec="html">top-level browsing context</a>, return.
1. Let <var>attributionSource</var> be |navigationParams|'s [=navigation params/attribution source=].
1. If |attributionSource| is null, return.
1. If |attributionSource|'s [=attribution source/attribution destination=] is not [=same site=] to |navigationParams|'s 
    <a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#navigation-params-origin">origin</a>, return.
1. [=Queue a task=] to [=process an attribution source=] with |attributionSource|.

To <dfn>process an attribution source</dfn> given an [=attribution source=] |source|:

1. Let |cache| be the user agent's [=attribution source cache=].
1. [=list/Remove=] all entries in |cache| where all of the following are true:
    * the entry's [=attribution source/attribution destination=] and |source|'s [=attribution source/attribution destination=] are equal.
    * the entry's [=attribution source/reporting endpoint=] is [=same origin=] with |source|'s [=attribution source/reporting endpoint=].
    * the entry's [=attribution source/number of reports=] value is greater than 0 .

    Note: This causes the user agent to favor triggering newer [=attribution sources=] over sources that have already been triggered.
1. [=list/Remove=] all entries in |cache| where the entry's [=attribution source/expiry=] value is less than the current time.
1. If the [=list/size=] of |cache| is less than an implementation-defined limit, [=set/append=] |source| to |cache|.

<h3 algorithm id="attribution-trigger-creation">Creating an attribution trigger</h3>

To <dfn>obtain an attribution trigger</dfn> given a [=url=] |url| and an
[=environment settings object=] |environment|, return a [=attribution trigger=]
with the items:

    : [=attribution trigger/trigger origin=]
    :: |environment|'s [=environment/top-level origin=].
    : [=attribution trigger/trigger data=]
    :: The result of applying [=parse attribution data=] with the value associated with the
        `"data"` field of |url|'s [=url/query=] modulo the user agent's [=max trigger data value=].
    : [=attribution trigger/trigger time=]
    :: The current time.
    : [=attribution trigger/reporting endpoint=]
    :: |url|'s [=url/origin=]

<dfn>Max trigger data value</dfn> is a vendor specific integer which controls the potential values of [=attribution report/trigger data=].

Issue: Formalize how to parse the query similar to URLSearchParams.

<h3 algorithm id="triggering-attribution">Triggering attribution</h3>

To <dfn>trigger attribution</dfn> from a [=request=] |request|, run the following steps:

1. If |request|'s [=request/current url's=] [=url/path=] is not `.well-known/attribution-reporting/trigger-attribution`,
    return.
1. If |request|'s [=request/redirect count=] is less than 1, return.
1. Let |previousUrl| be the second to last [=URL=] in |request|'s
    [=request/URL list=].
1. If |request|'s [=request/current url's=] [=url/origin=] is not [=same origin=] with
    |previousUrl|'s [=url/origin=], return.
1. Let |trigger| be the result of running [=obtain an attribution trigger=] with
    |request|'s [=request/current url=] and |request|'s client.

    Note: the restriction to require a redirect is needed to ensure that the
    request's origin is aware and in control of triggering attribution.

1. Issue: Need to spec how to store |trigger|.

<h3 algorithm id="parsing-data-fields">Parsing data fields</h3>

This section defines how to parse and extract both
[=attribution source/event id=] and [=attribution trigger/trigger data=].

To <dfn>parse attribution data</dfn> given a [=string=] |input| modulo an integer
|maxData| perform the following steps. They return a non-negative integer:

1. Let |decodedInput| be the result of applying the
    <a spec="html">rules for parsing non-negative integers</a> to |input|.
1. If |decodedInput| is an error, return zero.
1. If |decodedInput| is greater than 2<sup>64</sup>, return zero.
1. Let |clampedDecodedInput| be the remainder when dividing |decodedInput| by |maxData|.
1. Return |clampedDecodedInput|.

<h3 algorithm id="delivery-time">Establishing report delivery time</h3>

To <dfn>obtain a report delivery time</dfn> given an [=attribution source=] |source| and a
[=attribution trigger/trigger time=] |triggerTime| perform the  following steps. They
return a point in time.
1. Let |timeToTrigger| be the difference between
    |triggerTime| and [=attribution source/source time=].
1. Let |expiryDelta| be the difference between the |source|'s [=attribution source/expiry=] and
    the |source|'s [=attribution source/source time=]

    Note: |timeToTrigger| is less than |expiryDelta| because it is not normally possible to
    convert an expired attribution source.

1. If:
    <dl class="switch">
    <dt>|timeToTrigger| <= (2 days - 1 hour)</dt>
    <dd>return [=attribution source/source time=] + 2 days.</dd>

    <dt> |expiryDelta| > (2 days - 1 hour)
        - and |expiryDelta| < (7 days - 1 hour)
        - and |timeToTrigger| <= |expiryDelta|
    </dt>
    <dd>return |source|'s [=attribution source/expiry=] + 1 hour.</dd>

    <dt>|timeToTrigger| <= (7 days - 1 hour)</dt>
    <dd>return [=attribution source/source time=] + 7 days</dd>

    <dt>Otherwise</dt>
    <dd>return |source|'s [=attribution source/expiry=] + 1 hour.</dd>
    </dl>

<h3 algorithm id="queuing-report">Queuing a conversion report</h3>
TODO

<h3 algorithm id="attribution-credit">Establishing attribution credit</h3>
TODO

# Security consideration # {#security-considerations}
TODO

# Privacy consideration # {#privacy-considerations}
TODO

<h3 id="clearing-attribution-storage">Clearing attribution storage</h3>

A user agent's [=attribution caches=] contain data about a user's web activity. When a user agent clears an origin's storage, 
it MUST also remove entries in the [=attribution caches=] whose  [=attribution source/source origin=],
[=attribution source/attribution destination=], [=attribution source/reporting endpoint=], or 
[=attribution trigger/trigger origin=] is the [=same origin|same=] as the cleared origin.

A user agent MAY clear [=attribution cache=] entries at other times. For example, when a user agent clears
an origin from a user's browsing history.
